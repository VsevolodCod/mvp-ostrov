// –ü—Ä–æ—Å—Ç–æ–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
// –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —ç—Ç–æ –±—ã–ª–æ –±—ã –≤ Redux, Zustand –∏–ª–∏ Context API

class UserStore {
  constructor() {
    this.assignments = [];
    this.points = 0;
    this.listeners = [];
    this.loadFromStorage();
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ localStorage
  loadFromStorage() {
    try {
      const savedData = localStorage.getItem('userStore');
      if (savedData) {
        const parsed = JSON.parse(savedData);
        this.assignments = parsed.assignments || [];
        this.points = parsed.points || 0;
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ localStorage:', error);
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ localStorage
  saveToStorage() {
    try {
      const dataToSave = {
        assignments: this.assignments,
        points: this.points
      };
      localStorage.setItem('userStore', JSON.stringify(dataToSave));
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ localStorage:', error);
    }
  }

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è
  subscribe(listener) {
    this.listeners.push(listener);
    return () => {
      this.listeners = this.listeners.filter(l => l !== listener);
    };
  }

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
  notify() {
    this.saveToStorage();
    this.listeners.forEach(listener => listener(this.assignments, this.points));
  }

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  getUserAssignments() {
    return this.assignments;
  }

  // –í–∑—è—Ç—å –∑–∞–¥–∞–Ω–∏–µ
  takeAssignment(assignment) {
    const existingAssignment = this.assignments.find(a => a.id === assignment.id);
    if (existingAssignment) {
      console.log('–ó–∞–¥–∞–Ω–∏–µ —É–∂–µ –≤–∑—è—Ç–æ');
      return false;
    }

    const userAssignment = {
      ...assignment,
      status: '–ê–∫—Ç–∏–≤–Ω–æ–µ',
      takenAt: new Date().toISOString(),
      userId: 'current-user' // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —ç—Ç–æ –±—ã–ª –±—ã ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    };

    this.assignments.push(userAssignment);
    this.notify();
    return true;
  }

  // –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ
  completeAssignment(assignmentId, reportData = {}) {
    const assignment = this.assignments.find(a => a.id === assignmentId);
    if (assignment && assignment.status === '–ê–∫—Ç–∏–≤–Ω–æ–µ') {
      assignment.status = '–ó–∞–≤–µ—Ä—à–µ–Ω–æ';
      assignment.completedAt = new Date().toISOString();
      assignment.reportData = reportData;
      
      // –ù–∞—á–∏—Å–ª—è–µ–º –æ—á–∫–∏ –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
      const pointsEarned = this.calculatePoints(assignment);
      this.points += pointsEarned;
      assignment.pointsEarned = pointsEarned;
      
      this.notify();
      return { success: true, pointsEarned };
    }
    return { success: false, pointsEarned: 0 };
  }

  // –†–∞—Å—á–µ—Ç –æ—á–∫–æ–≤ –∑–∞ –∑–∞–¥–∞–Ω–∏–µ
  calculatePoints(assignment) {
    let basePoints = 100; // –ë–∞–∑–æ–≤—ã–µ –æ—á–∫–∏ –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    
    // –ë–æ–Ω—É—Å –∑–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    if (assignment.priority === '–í—ã—Å–æ–∫–∏–π') {
      basePoints += 50;
    } else if (assignment.priority === '–°—Ä–µ–¥–Ω–∏–π') {
      basePoints += 25;
    }
    
    // –ë–æ–Ω—É—Å –∑–∞ —Ç–∏–ø –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è
    if (assignment.reward && assignment.reward.includes('–ë–µ—Å–ø–ª–∞—Ç–Ω–æ')) {
      basePoints += 30;
    }
    
    // –ë–æ–Ω—É—Å –∑–∞ –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç—á–µ—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç–∞)
    if (assignment.reportData && assignment.reportData.overallRating) {
      const rating = assignment.reportData.overallRating;
      if (rating >= 4.5) {
        basePoints += 50; // –û—Ç–ª–∏—á–Ω—ã–π –æ—Ç—á–µ—Ç
      } else if (rating >= 4.0) {
        basePoints += 25; // –•–æ—Ä–æ—à–∏–π –æ—Ç—á–µ—Ç
      }
    }
    
    return basePoints;
  }

  // –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ
  cancelAssignment(assignmentId) {
    this.assignments = this.assignments.filter(a => a.id !== assignmentId);
    this.notify();
    return true;
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –≤–∑—è—Ç–æ –ª–∏ –∑–∞–¥–∞–Ω–∏–µ
  isAssignmentTaken(assignmentId) {
    return this.assignments.some(a => a.id === assignmentId);
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  getUserStats() {
    const total = this.assignments.length;
    const active = this.assignments.filter(a => a.status === '–ê–∫—Ç–∏–≤–Ω–æ–µ').length;
    const completed = this.assignments.filter(a => a.status === '–ó–∞–≤–µ—Ä—à–µ–Ω–æ').length;
    const totalPointsEarned = this.assignments
      .filter(a => a.status === '–ó–∞–≤–µ—Ä—à–µ–Ω–æ' && a.pointsEarned)
      .reduce((sum, a) => sum + a.pointsEarned, 0);
    
    return {
      total,
      active,
      completed,
      points: this.points,
      totalPointsEarned
    };
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –æ—á–∫–∏
  getPoints() {
    return this.points;
  }

  // –î–æ–±–∞–≤–∏—Ç—å –æ—á–∫–∏ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –±–æ–Ω—É—Å–æ–≤)
  addPoints(amount) {
    this.points += amount;
    this.notify();
    return this.points;
  }

  // –°–∏—Å—Ç–µ–º–∞ —É—Ä–æ–≤–Ω–µ–π
  getLevelInfo(points = this.points) {
    const levels = [
      { name: "–ù–æ–≤–∏—á–æ–∫", minPoints: 0, maxPoints: 499, color: "gray", icon: "üå±", description: "–¢–æ–ª—å–∫–æ –Ω–∞—á–∏–Ω–∞–µ—Ç–µ —Å–≤–æ–π –ø—É—Ç—å" },
      { name: "–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å", minPoints: 500, maxPoints: 999, color: "blue", icon: "üîç", description: "–ò–∑—É—á–∞–µ—Ç–µ –º–∏—Ä –æ—Ç–µ–ª–µ–π" },
      { name: "–ö—Ä–∏—Ç–∏–∫", minPoints: 1000, maxPoints: 1999, color: "green", icon: "‚≠ê", description: "–û–ø—ã—Ç–Ω—ã–π –æ—Ü–µ–Ω—â–∏–∫" },
      { name: "–≠–∫—Å–ø–µ—Ä—Ç", minPoints: 2000, maxPoints: 3999, color: "purple", icon: "üèÜ", description: "–ü—Ä–∏–∑–Ω–∞–Ω–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç" },
      { name: "–ú–∞—Å—Ç–µ—Ä", minPoints: 4000, maxPoints: 6999, color: "orange", icon: "üëë", description: "–ú–∞—Å—Ç–µ—Ä —Å–≤–æ–µ–≥–æ –¥–µ–ª–∞" },
      { name: "–õ–µ–≥–µ–Ω–¥–∞", minPoints: 7000, maxPoints: 9999, color: "red", icon: "üî•", description: "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –≥–æ—Å—Ç—å" },
      { name: "–ú–∏—Ñ–∏—á–µ—Å–∫–∏–π", minPoints: 10000, maxPoints: 19999, color: "indigo", icon: "‚ú®", description: "–ú–∏—Ñ–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞" },
      { name: "–ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π", minPoints: 20000, maxPoints: Infinity, color: "gold", icon: "üåü", description: "–ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã" }
    ];

    const currentLevel = levels.find(level => points >= level.minPoints && points < level.maxPoints) || levels[levels.length - 1];
    const nextLevel = levels.find(level => level.minPoints > points) || null;
    
    return {
      current: currentLevel,
      next: nextLevel,
      progress: nextLevel ? ((points - currentLevel.minPoints) / (nextLevel.minPoints - currentLevel.minPoints)) * 100 : 100,
      pointsToNext: nextLevel ? nextLevel.minPoints - points : 0
    };
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤
  getUserLeaderboardInfo() {
    const levelInfo = this.getLevelInfo();
    return {
      name: "–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞", // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —ç—Ç–æ –±—ã–ª–æ –±—ã –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
      points: this.points,
      level: levelInfo.current,
      completedAssignments: this.assignments.filter(a => a.status === '–ó–∞–≤–µ—Ä—à–µ–Ω–æ').length,
      joinDate: "2023-01-15"
    };
  }

  // –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
  resetData() {
    this.assignments = [];
    this.points = 0;
    localStorage.removeItem('userStore');
    this.notify();
  }
}

// –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä store
const userStore = new UserStore();

export default userStore;